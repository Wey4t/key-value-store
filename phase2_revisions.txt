Original proposal for REGISTER:
A --> S: {uid,"REGISTER",pass,r, K_A, {uid,"REGISTER",pass,r}k_A}K_S
S --> A: {uid,"OK",r, {uid,"OK",r}k_S}K_A

New protocol for REGISTER:
A --> S: {K_AS}K_S,{uid,"REGISTER",pass,r, K_A, {uid,"REGISTER",pass,r}k_A}K_AS
S --> A: {uid,"OK",r, {uid,"OK",r}k_S}K_AS

The REGISTER protocol is almost the same as described in part 1. However, we decided to instead 
encrypt the message with a newly generated shared key, which we send encrypted with the server 
public key. This makes the format of the REGISTER message almost identical to the format used by 
LOGIN, meaning the server can expect this common format for any messages sent outside of a session.

We also changed the specification based on TA feedback in class, as password hashes will now be 
stored in a map on the server's memory (i.e. a variable), rather than in a file that persists 
between runs of the program.

We also changed CHANGE_PASS from our proposal.
Original proposal for CHANGE_PASS:
A --> S: {“CHANGE_PASS”, old_pass, new_pass, {"CHANGE_PASS",old_pass,new_pass,r}k_A}K_AS
S --> A: {uid,"OK",r, {uid,"OK",r}k_S}K_AS

New protocol for CHANGE_PASS:
A --> S: {"CHANGE_PASS", old_pass, new_pass}K_AS
S --> A: {uid,"OK"}K_AS

This matches the following format, used by all other operations within a session:
A --> S: {request}K_AS
S --> A: {response}K_AS

Based on Phase 1, we know that the secret channel (encrypted with shared key) already enables 
secret (aka Confidential) and integrity-protected communication. Since the CHANGE_PASS
operation can only occur within a session, we don't need to worry about preserving 
Confidentiality or Integrity, as we already handled that in Phase 1. 
